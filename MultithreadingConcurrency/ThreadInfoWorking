
Creating a new object or instance in Java does not automatically invoke or create a new thread. Object creation is a fundamental operation in Java and is unrelated to the creation of threads.

In Java, a thread is typically created by either extending the Thread class or implementing the Runnable interface and then instantiating a Thread object with an instance of the class that represents the thread's behavior.


Yes, that's correct. In any Java program, a main thread is automatically created and started when the program begins its execution. This main thread is responsible for executing the main() method of the program. The main thread is a single thread by default, and it's used to execute the main flow of the program.

If a user wants to introduce parallel or concurrent operations in their program, they need to explicitly create additional threads. This can be done by extending the Thread class or implementing the Runnable interface. Here are two common approaches:

Points to remember for Daemon Thread in Java
It provides services to user threads for background supporting tasks. It has no role in life than to serve user threads.
Its life depends on user threads.
It is a low priority thread.

Q-Why JVM terminates the daemon thread if there is no user thread?
The sole purpose of the daemon thread is that it provides services to user thread for background supporting task. If there is no user thread, why should JVM keep running this thread. That is why JVM terminates the daemon thread if there is no user thread.

///////////////////
Deadlock in Java is a part of multithreading. Deadlock can occur in a situation when a thread is waiting for an object lock, that is acquired by another thread and second thread is waiting for an object lock that is acquired by first thread. Since, both threads are waiting for each other to release the lock, the condition is called deadlock.

How to Avoid Deadlock in Java?
Deadlocks cannot be completely resolved. But we can avoid them by following basic rules mentioned below:

Avoid Nested Locks: We must avoid giving locks to multiple threads, this is the main reason for a deadlock condition. It normally happens when you give locks to multiple threads.
Avoid Unnecessary Locks: The locks should be given to the important threads. Giving locks to the unnecessary threads that cause the deadlock condition.
Using Thread Join: A deadlock usually happens when one thread is waiting for the other to finish. In this case, we can use join with a maximum time that a thread will take.